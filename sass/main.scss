/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */

@import "compass/reset";
@import "compass/typography/links/link-colors";
@import "compass/css3/font-face";

// style variables

$darkRed: #ce0c17;
$fontSize: 18px; // match the PDF
$boxSize: 30px;
$boxBorderSize: 2px;
$defaultMargin: 50px;
$expandedBoxPadding: 20px;

// positioning variables

$box1_x: 1000px;
$box2_x: 1500px;
$box3_x: 2000px;
$box_y: 190px;
$manu_x: 758px; // match to PDF
$manu_y: 261px; // match to PDF
$feet_y: 353px; // to more or less touch the feet of the cartoon characters in header.png

// animation variables

$animStart: 2s; // first animation starts after $animStart seconds
$animDurationToMoveOriginalTextToBoxes: 2s;
$animDurationToMakeArrowsDisappear: 1s;
$animDurationToRunAndJump: 3s; // 2s run, 1s jump
$animDurationToExpandBox: 2s;

// special fonts

@include font-face("Solex", font-files("solexreg-webfont.woff")); // yup, I haven't paid for it, but it's only used for this job application (so it's life expectancy is about 10min)
$font-family: "Solex";
@include font-face("JandA", font-files("jandasafeandsoundsolid-webfont.woff")); // same here
$font-family: "JandA";

body {
  font-family: "Solex";
  color: #777472;
  font-size: $fontSize;
  position: relative;
}

a {
  @include link-colors($darkRed, $darkRed, $darkRed, $darkRed, $darkRed);
}

header {
  background: url("../images/header.png");
  width: image-width("header.png");
  height: image-height("header.png");
}

h1 {
  font-family: "JandA";
  color: $darkRed;
  font-size: 21px; // match the PDF
  margin: 0 0 1em 0; // match the PDF
}

ul {
  list-style: none;
  margin-left: 0;
  padding-left: 0;
}

li {
  padding-left: 1em;
  text-indent: -1em;
  line-height: 1.5em;

  &:before {
    content: "â€¢";
    padding-right: 5px;
    color: $darkRed;
  }
}

#requirements,
#profile,
#job,
#application {
  -webkit-animation-delay: $animStart;
  -webkit-animation-duration: $animDurationToMoveOriginalTextToBoxes;
  -webkit-animation-fill-mode: both;

  /* this sucks, but it seems impossible to animate anything else than absolutely positionned elements */
  position: absolute;
}

#requirements {
  background: #f2f1ec; // match PDF file
  width: image-width("header.png");
  height: 600px; // arbitrary
  top: image-height("header.png");
}

#profile,
#job,
#application {
  left: 80px; // match PDF file
}

@mixin moveToBoxAnimation($name, $x) {
    @-webkit-keyframes $name {
      75% {
        opacity: 1;
      }
      to {
        font-size: 0;
        opacity: 0;
        top: - $feet_y + $box_y; // looks weird, but that's because it's relative to #requirements position after its transformation into grass ;)
        left: $x;
      }
    }
}

$profileHeight: 204px;
#profile {
  top: $defaultMargin; // relative to #requirements
  -webkit-animation-name: moveToBox1;
}
@include moveToBoxAnimation("moveToBox1", $box1_x);

$jobHeight: 150px;
#job {
  top: $defaultMargin + $profileHeight + $defaultMargin; // relative to #requirements
  -webkit-animation-name: moveToBox2;
}
@include moveToBoxAnimation("moveToBox2", $box2_x);

#application {
  top: $defaultMargin + $profileHeight + $defaultMargin + $jobHeight + $defaultMargin; // relative to #requirements
  -webkit-animation-name: moveToBox3;
}
@include moveToBoxAnimation("moveToBox3", $box3_x);

#requirements {
  -webkit-animation-name: grass;
}

@-webkit-keyframes grass {
  to {
    // TODO: add texture
    background: green;
    height: 100px; // arbitrary
    width: 2500px; // arbitrary
    top: $feet_y;
  }
}

.box {
  border: $boxBorderSize solid black;
  border-radius: 5px;
  background: #ffc70c;
  color: black;
  width: $boxSize;
  line-height: $boxSize;
  text-align: center;
  font-size: $boxSize;
  position: absolute;
  top: $box_y;

  &.expanded {
    font-size: $fontSize;
    text-align: left;
    overflow-y: scroll;
    padding: $expandedBoxPadding;
  }
}

#box1 {
  left: $box1_x;
}

#box2 {
  left: $box2_x;
}

#box3 {
  left: $box3_x;
}

#arrows {
  width: image-width("arrows.png");
  height: image-height("arrows.png");
  background-image: url("../images/arrows.png");
  position: absolute;
  top: 208px; // match the PDF
  left: 756px; // match the PDF

  -webkit-animation-delay: $animStart + $animDurationToMoveOriginalTextToBoxes;
  -webkit-animation-duration: $animDurationToMakeArrowsDisappear;
  -webkit-animation-fill-mode: both;
  -webkit-animation-name: disappear;
}

@-webkit-keyframes disappear {
  to {
    opacity: 0;
  }
}

/*
#manu {
width: 50px;
height: 72px;
background-image: url("../images/sprite.png");

-webkit-animation: play .8s steps(10) infinite;
}

@-webkit-keyframes play {
from { background-position:    0px; }
to { background-position: -500px; }
}
*/
#manu {
  width: image-width("manu.png");
  height: image-height("manu.png");
  background-image: url("../images/manu.png");
  position: absolute;

  -webkit-animation-delay: $animStart + $animDurationToMoveOriginalTextToBoxes + $animDurationToMakeArrowsDisappear;
  -webkit-animation-duration: $animDurationToRunAndJump;
  -webkit-animation-fill-mode: both;
  -webkit-animation-name: jumpnrun1;
}

@mixin runAndJumpAnimation($name, $start_x, $end_x) {
    @-webkit-keyframes $name {
      from {
        top: $manu_y;
        left: $start_x;
      }
      // run for 2/3 of the time
      66% {
        top: $manu_y;
        left: $end_x;
      }
      // jump
      82% {
        top: $box_y + $boxSize + 2 * $boxBorderSize - 4px; // there are 4px of white on top of Manu's head in manu.png (TODO: remove?)
        left: $end_x;
      }
      to {
        top: $manu_y;
        left: $end_x;
      }
    }
}

@function afterRun_x($targetBox_x) {
    @return ($targetBox_x + $boxSize / 2 + $boxBorderSize) - (image-width("manu.png") / 2);
}

$afterFirstRun_x: afterRun_x($box1_x);
@include runAndJumpAnimation("jumpnrun1", $manu_x, $afterFirstRun_x);

$afterSecondRun_x: afterRun_x($box2_x);
@include runAndJumpAnimation("jumpnrun2", $afterFirstRun_x, $afterSecondRun_x); // triggered via JavaScript when button is clicked

$afterThirdRun_x: afterRun_x($box3_x);
@include runAndJumpAnimation("jumpnrun3", $afterSecondRun_x, $afterThirdRun_x); // triggered via JavaScript when button is clicked

#box1 {
  -webkit-animation-delay: $animStart + $animDurationToMoveOriginalTextToBoxes + $animDurationToMakeArrowsDisappear + $animDurationToRunAndJump;
  -webkit-animation-name: expand1;
}

@mixin boxResizeAnimation($iteration, $box_x) {
  $expandedWidth: 500px;
  $expanded_y: 10px;

  $left: $box_x - $expandedWidth / 2 + $boxSize / 2;
  $height: $box_y - $expanded_y + $boxSize - 2 * $expandedBoxPadding;

  #box#{$iteration} {
    -webkit-animation-duration: $animDurationToExpandBox;
    -webkit-animation-fill-mode: both;
  }

  @-webkit-keyframes expand#{$iteration} {
    from {
      width: $boxSize;
      height: $boxSize;
    }
    to {
      top: $expanded_y;
      left: $left;
      width: $expandedWidth;
      height: $height;
    }
  }

  @-webkit-keyframes shrink#{$iteration} {
    // reverse from expand. Is there a better way? Tried without success with animation-direction: reverse
    from {
      top: $expanded_y;
      left: $left;
      width: $expandedWidth;
      height: $height; 
    }
    to {
      width: $boxSize;
      height: $boxSize;
    }
  }
}
@include boxResizeAnimation(1, $box1_x);
@include boxResizeAnimation(2, $box2_x);
@include boxResizeAnimation(3, $box3_x);